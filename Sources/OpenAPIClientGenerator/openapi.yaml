openapi: '3.1.0'
info:
  title: Soccer Team Management API
  version: 1.0.0
  description: サッカーチーム管理のためのAPI仕様
servers:
  - url: https://api.soccerteam.example.com/v1
    description: 本番環境サーバー
paths:
  /players:
    post:
      summary: 新しい選手を登録
      operationId: addPlayer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Player'
      responses:
        '201':
          description: 選手が正常に登録されました
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '400':
          description: 無効な入力データ
    get:
      summary: 全選手の一覧を取得
      operationId: getPlayers
      parameters:
        - name: position
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Position'
          description: ポジションでフィルタリング
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - active
              - injured
              - suspended
          description: ステータスでフィルタリング
      responses:
        '200':
          description: 選手一覧の取得成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'
  /players/{playerId}:
    get:
      summary: 選手IDで選手情報を取得
      operationId: getPlayerById
      parameters:
        - name: playerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 選手情報の取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '404':
          description: 選手が見つかりません
    put:
      summary: 選手情報を更新
      operationId: updatePlayer
      parameters:
        - name: playerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Player'
      responses:
        '200':
          description: 選手情報の更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '404':
          description: 選手が見つかりません
        '400':
          description: 無効な入力データ
    delete:
      summary: 選手を削除（退団処理）
      operationId: deletePlayer
      parameters:
        - name: playerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 選手の削除成功
        '404':
          description: 選手が見つかりません
  /teams:
    post:
      summary: 新しいチームを作成
      operationId: createTeam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        '201':
          description: チームの作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          description: 無効な入力データ
    get:
      summary: チーム一覧を取得
      operationId: getTeams
      parameters:
        - name: league
          in: query
          required: false
          schema:
            type: string
          description: リーグでフィルタリング
      responses:
        '200':
          description: チーム一覧の取得成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
  /teams/{teamId}:
    get:
      summary: チームIDでチーム情報を取得
      operationId: getTeamById
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: チーム情報の取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '404':
          description: チームが見つかりません
  /teams/{teamId}/lineup:
    post:
      summary: 試合のスターティングラインナップを設定
      operationId: setLineup
      parameters:
        - name: teamId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lineup'
      responses:
        '200':
          description: ラインナップの設定成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lineup'
        '400':
          description: 無効なラインナップ（選手数が不正など）
        '404':
          description: チームが見つかりません
  /matches:
    post:
      summary: 新しい試合を登録
      operationId: createMatch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
      responses:
        '201':
          description: 試合の登録成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        '400':
          description: 無効な入力データ
    get:
      summary: 試合一覧を取得
      operationId: getMatches
      parameters:
        - name: teamId
          in: query
          required: false
          schema:
            type: integer
            format: int64
          description: チームIDでフィルタリング
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - scheduled
              - in_progress
              - finished
          description: 試合ステータスでフィルタリング
      responses:
        '200':
          description: 試合一覧の取得成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
  /matches/{matchId}/result:
    put:
      summary: 試合結果を更新
      operationId: updateMatchResult
      parameters:
        - name: matchId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchResult'
      responses:
        '200':
          description: 試合結果の更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        '404':
          description: 試合が見つかりません
        '400':
          description: 無効な結果データ
components:
  schemas:
    Player:
      type: object
      required:
        - name
        - position
        - jerseyNumber
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: 山田太郎
        position:
          $ref: '#/components/schemas/Position'
        jerseyNumber:
          type: integer
          minimum: 1
          maximum: 99
          example: 10
        dateOfBirth:
          type: string
          format: date
          example: "1995-04-15"
        nationality:
          type: string
          example: Japan
        height:
          type: number
          format: float
          example: 175.5
          description: 身長（cm）
        weight:
          type: number
          format: float
          example: 68.0
          description: 体重（kg）
        status:
          type: string
          enum:
            - active
            - injured
            - suspended
          default: active
        teamId:
          type: integer
          format: int64
          example: 1
        stats:
          $ref: '#/components/schemas/PlayerStats'
    Position:
      type: string
      enum:
        - GK
        - DF
        - MF
        - FW
      description: ポジション（GK:ゴールキーパー、DF:ディフェンダー、MF:ミッドフィルダー、FW:フォワード）
    PlayerStats:
      type: object
      properties:
        goals:
          type: integer
          default: 0
          example: 12
        assists:
          type: integer
          default: 0
          example: 8
        yellowCards:
          type: integer
          default: 0
          example: 3
        redCards:
          type: integer
          default: 0
          example: 0
        appearances:
          type: integer
          default: 0
          example: 25
    Team:
      type: object
      required:
        - name
        - foundedYear
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: FC東京
        foundedYear:
          type: integer
          example: 1998
        homeStadium:
          type: string
          example: 味の素スタジアム
        league:
          type: string
          example: J1リーグ
        manager:
          type: string
          example: 鈴木一郎
        players:
          type: array
          items:
            $ref: '#/components/schemas/Player'
    Lineup:
      type: object
      required:
        - formation
        - playerIds
      properties:
        id:
          type: integer
          format: int64
        formation:
          type: string
          example: "4-4-2"
          pattern: '^\d+-\d+-\d+(-\d+)?$'
        playerIds:
          type: array
          items:
            type: integer
            format: int64
          minItems: 11
          maxItems: 11
          description: スターティングメンバー11人の選手ID
        substituteIds:
          type: array
          items:
            type: integer
            format: int64
          maxItems: 9
          description: 控え選手のID（最大9人）
        captain:
          type: integer
          format: int64
          description: キャプテンの選手ID
    Match:
      type: object
      required:
        - homeTeamId
        - awayTeamId
        - scheduledDate
      properties:
        id:
          type: integer
          format: int64
          example: 1
        homeTeamId:
          type: integer
          format: int64
          example: 1
        awayTeamId:
          type: integer
          format: int64
          example: 2
        scheduledDate:
          type: string
          format: date-time
          example: "2024-03-15T19:00:00Z"
        venue:
          type: string
          example: 味の素スタジアム
        status:
          type: string
          enum:
            - scheduled
            - in_progress
            - finished
          default: scheduled
        result:
          $ref: '#/components/schemas/MatchResult'
    MatchResult:
      type: object
      required:
        - homeScore
        - awayScore
      properties:
        homeScore:
          type: integer
          minimum: 0
          example: 2
        awayScore:
          type: integer
          minimum: 0
          example: 1
        scorers:
          type: array
          items:
            $ref: '#/components/schemas/Goal'
    Goal:
      type: object
      required:
        - playerId
        - minute
      properties:
        playerId:
          type: integer
          format: int64
          example: 10
        minute:
          type: integer
          minimum: 1
          maximum: 120
          example: 45
        assistPlayerId:
          type: integer
          format: int64
          example: 7
        type:
          type: string
          enum:
            - regular
            - penalty
            - own_goal
            - free_kick
          default: regular